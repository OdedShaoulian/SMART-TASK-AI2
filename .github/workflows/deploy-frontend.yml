name: Deploy Frontend to Azure Static Web Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent overlapping deployments
concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

# === STAGING (disabled) ===
# Uncomment the following section to enable staging deployments
# on:
#   push:
#     branches: [ main, develop ]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         default: 'production'
#         type: choice
#         options:
#         - production
#         - staging

jobs:
  deploy:
    name: Deploy to Azure Static Web Apps
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: npm
        cache-dependency-path: ./client/package-lock.json

    - name: Validate & sanitize PRODUCTION_API_URL
      run: |
        RAW="${{ secrets.PRODUCTION_API_URL }}"
        SANITIZED="$(echo "$RAW" | sed -e 's/^[[:space:]]*//; s/[[:space:]]*$//' \
                                     -e 's/^"//; s/"$//' -e "s/^'//; s/'$//" \
                                     -e 's:/*$::')"

        # Mask secrets in logs
        echo "::add-mask::$RAW"
        echo "::add-mask::$SANITIZED"

        RAW_PREFIX="$(echo "$RAW" | cut -c1-8)"
        SAN_PREFIX="$(echo "$SANITIZED" | cut -c1-8)"
        echo "üîé PRODUCTION_API_URL (raw) prefix: ${RAW_PREFIX}‚Ä¶"
        echo "üîé PRODUCTION_API_URL (sanitized) prefix: ${SAN_PREFIX}‚Ä¶"

        # Validations
        if [ -z "$SANITIZED" ]; then
          echo "‚ùå PRODUCTION_API_URL is missing (GitHub ‚Üí Settings ‚Üí Secrets ‚Üí Actions)"; exit 1; fi

        case "$SANITIZED" in
          http://*|https://*) : ;;
          *) echo "‚ùå PRODUCTION_API_URL must start with http:// or https://"; exit 1;;
        esac

        # ‚úÖ Validate via ENV (fixes 'node: bad option: --url=...')
        URL="$SANITIZED" node -e 'try{ new URL(process.env.URL) }catch(e){ console.error("‚ùå PRODUCTION_API_URL must be a full, valid URL (example: https://<your-backend>.azurewebsites.net)"); process.exit(1) }'

        if echo "$SANITIZED" | grep -qi 'azurestaticapps\.net'; then
          echo "‚ö†Ô∏è PRODUCTION_API_URL looks like a Static Web Apps frontend URL; expected the backend Web App domain (azurewebsites.net)."
        fi

        # Export sanitized value for next steps
        echo "SANITIZED_API_URL=$SANITIZED" >> "$GITHUB_ENV"

    - name: Early Env Validation
      run: |
        echo "üîç Validating required environment variables..."
        
        # Check AZURE_STATIC_WEB_APPS_API_TOKEN
        if [ -z "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" ]; then
          echo "‚ùå AZURE_STATIC_WEB_APPS_API_TOKEN is required"
          echo "   Get this from: Azure Portal ‚Üí Static Web Apps ‚Üí Deployment token"
          exit 1
        else
          echo "‚úÖ AZURE_STATIC_WEB_APPS_API_TOKEN: ${AZURE_STATIC_WEB_APPS_API_TOKEN:0:4}***"
        fi
        
        echo "‚úÖ Environment validation passed"

    - name: Build client (prebuild on runner)
      working-directory: ./client
      env:
        VITE_API_URL: ${{ env.SANITIZED_API_URL }}
      run: |
        echo "::add-mask::$VITE_API_URL"
        echo "üß™ Using VITE_API_URL prefix: ${VITE_API_URL:0:8}‚Ä¶"
        npm ci
        npm run build

    - name: Deploy to Azure Static Web Apps (upload prebuilt)
      id: deploy_swa
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        action: upload
        app_location: ./client
        app_artifact_location: ./client/dist
        skip_app_build: true
        deployment_environment: production

    - name: Resolve SWA URL for smoke test
      run: |
        RAW="${{ steps.deploy_swa.outputs.static_web_app_url }}"
        [ -z "$RAW" ] && RAW="${{ secrets.FRONTEND_URL }}"
        SANITIZED="$(echo "$RAW" | sed -e 's/^[[:space:]]*//; s/[[:space:]]*$//' \
                                       -e 's/^"//; s/"$//' -e "s/^'//; s/'$//" \
                                       -e 's:/*$::')"
        echo "::add-mask::$RAW"
        echo "::add-mask::$SANITIZED"
        PREF="$(echo "$SANITIZED" | cut -c1-12)"
        echo "üîé SWA URL (raw) prefix: $(echo "$RAW" | cut -c1-12)‚Ä¶"
        echo "üîé SWA URL (sanitized) prefix: ${PREF}‚Ä¶"

        if [ -z "$SANITIZED" ]; then
          echo "‚ùå SWA URL not found. The deploy action produced no static_web_app_url and FRONTEND_URL secret is not set."; exit 1; fi
        case "$SANITIZED" in
          http://*|https://*) : ;;
          *) echo "‚ùå SWA URL must start with http:// or https://"; exit 1;;
        esac

        URL="$SANITIZED" node -e 'try{ new URL(process.env.URL) }catch(e){ console.error("‚ùå SWA URL is not a valid URL"); process.exit(1) }'
        echo "SWA_URL=$SANITIZED" >> "$GITHUB_ENV"

    - name: Frontend post-deploy smoke test
      run: |
        echo "üîç Running frontend smoke test against: ${SWA_URL:0:12}‚Ä¶"
        # Expect HTTP 200 (SPA fallback ok)
        CODE="$(curl -fsS -o /dev/null -w "%{http_code}" "$SWA_URL/")" || { echo "‚ùå Frontend unreachable"; exit 1; }
        if [ "$CODE" != "200" ]; then
          echo "‚ùå Frontend deployment test failed"
          echo "   Expected: GET $SWA_URL ‚Üí 200 OK (SPA fallback)"
          echo "   Got: $CODE"
          exit 1
        fi
        echo "‚úÖ Frontend OK (200)"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Frontend successfully deployed to Azure Static Web Apps!"
        echo "Production URL: ${SWA_URL:0:12}‚Ä¶"
        echo "Backend API: ${SANITIZED_API_URL:0:12}‚Ä¶"
        echo "SPA Fallback: Configured via staticwebapp.config.json"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Frontend deployment failed!"
        echo "Check the logs above for details."
        echo "Ensure AZURE_STATIC_WEB_APPS_API_TOKEN and PRODUCTION_API_URL are set in GitHub Secrets"

# === STAGING (disabled) ===
# Uncomment to deploy to staging environment
# staging-deploy:
#   name: Deploy to Azure Static Web Apps (Staging)
#   runs-on: ubuntu-latest
#   environment: staging
#   if: github.event.inputs.environment == 'staging'
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v4
#   - name: Setup Node.js
#     uses: actions/setup-node@v4
#     with:
#       node-version: '20.x'
#       cache: 'npm'
#   - name: Build client with staging API URL
#     working-directory: ./client
#     run: npm run build
#     env:
#       VITE_API_URL: ${{ secrets.STAGING_API_URL }}
#   - name: Deploy to Staging
#     uses: Azure/static-web-apps-deploy@v1
#     with:
#       azure_static_web_apps_api_token: ${{ secrets.AZURE_STAGING_STATIC_WEB_APPS_API_TOKEN }}
#       action: upload
#       app_location: ./client
#       output_location: dist
#       app_build_command: npm ci && npm run build
#       deployment_environment: staging
