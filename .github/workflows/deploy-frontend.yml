name: Deploy Frontend to Azure Static Web Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent overlapping deployments
concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

# === STAGING (disabled) ===
# Uncomment the following section to enable staging deployments
# on:
#   push:
#     branches: [ main, develop ]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         default: 'production'
#         type: choice
#         options:
#         - production
#         - staging

jobs:
  deploy:
    name: Deploy to Azure Static Web Apps
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Early Env Validation
      run: |
        echo "üîç Validating required environment variables..."
        
        # Check AZURE_STATIC_WEB_APPS_API_TOKEN
        if [ -z "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" ]; then
          echo "‚ùå AZURE_STATIC_WEB_APPS_API_TOKEN is required"
          echo "   Get this from: Azure Portal ‚Üí Static Web Apps ‚Üí Deployment token"
          exit 1
        else
          echo "‚úÖ AZURE_STATIC_WEB_APPS_API_TOKEN: ${AZURE_STATIC_WEB_APPS_API_TOKEN:0:4}***"
        fi
        
        # Check PRODUCTION_API_URL
        if [ -z "${{ secrets.PRODUCTION_API_URL }}" ]; then
          echo "‚ùå PRODUCTION_API_URL is required"
          echo "   This should be your backend API URL (e.g., https://your-backend.azurewebsites.net)"
          exit 1
        else
          echo "‚úÖ PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}"
        fi
        
        echo "‚úÖ Environment validation passed"

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Build client with VITE_API_URL
      working-directory: ./client
      run: npm run build
      env:
        VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        action: upload
        app_location: ./client
        output_location: dist
        app_build_command: npm ci && npm run build
        deployment_environment: production

    - name: Get deployment URL
      id: deployment_url
      run: |
        echo "url=https://${{ secrets.AZURE_STATIC_WEB_APP_NAME }}.azurestaticapps.net" >> $GITHUB_OUTPUT

    - name: Wait for deployment
      run: sleep 30

    - name: Post-deploy smoke test
      run: |
        echo "üîç Running post-deployment smoke tests..."
        
        # Test frontend deployment
        curl -sSf ${{ steps.deployment_url.outputs.url }} || {
          echo "‚ùå Frontend deployment test failed"
          echo "   Expected: GET ${{ steps.deployment_url.outputs.url }}"
          echo "   Response: 200 OK with SPA fallback"
          exit 1
        }
        
        echo "‚úÖ Frontend deployment test passed"
        echo "‚úÖ All smoke tests passed"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Frontend successfully deployed to Azure Static Web Apps!"
        echo "Production URL: ${{ steps.deployment_url.outputs.url }}"
        echo "Backend API: ${{ secrets.PRODUCTION_API_URL }}"
        echo "SPA Fallback: Configured via staticwebapp.config.json"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Frontend deployment failed!"
        echo "Check the logs above for details."
        echo "Ensure AZURE_STATIC_WEB_APPS_API_TOKEN and PRODUCTION_API_URL are set in GitHub Secrets"

# === STAGING (disabled) ===
# Uncomment to deploy to staging environment
# staging-deploy:
#   name: Deploy to Azure Static Web Apps (Staging)
#   runs-on: ubuntu-latest
#   environment: staging
#   if: github.event.inputs.environment == 'staging'
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v4
#   - name: Setup Node.js
#     uses: actions/setup-node@v4
#     with:
#       node-version: '20.x'
#       cache: 'npm'
#   - name: Build client with staging API URL
#     working-directory: ./client
#     run: npm run build
#     env:
#       VITE_API_URL: ${{ secrets.STAGING_API_URL }}
#   - name: Deploy to Staging
#     uses: Azure/static-web-apps-deploy@v1
#     with:
#       azure_static_web_apps_api_token: ${{ secrets.AZURE_STAGING_STATIC_WEB_APPS_API_TOKEN }}
#       action: upload
#       app_location: ./client
#       output_location: dist
#       app_build_command: npm ci && npm run build
#       deployment_environment: staging
