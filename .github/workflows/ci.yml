name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Prevent overlapping runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install server dependencies
      working-directory: ./server
      run: npm ci

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Environment Variable Validation
      working-directory: ./server
      run: |
        echo "üîç Checking environment variables..."
        node ../../tools/print-env-check.js
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: test-jwt-secret
        COOKIE_SECRET: test-cookie-secret
        CSRF_SECRET: test-csrf-secret
        CORS_ORIGIN: http://localhost:5173
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRY: 10m
        JWT_REFRESH_TOKEN_EXPIRY: 7d
        RATE_LIMIT_WINDOW_MS: 900000
        RATE_LIMIT_MAX_REQUESTS: 100
        LOGIN_RATE_LIMIT_WINDOW_MS: 900000
        LOGIN_RATE_LIMIT_MAX_ATTEMPTS: 5
        NODE_ENV: test

    - name: Generate Prisma client
      working-directory: ./server
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Run server tests
      working-directory: ./server
      run: npm test
      env:
        JWT_SECRET: test-jwt-secret
        COOKIE_SECRET: test-cookie-secret
        CSRF_SECRET: test-csrf-secret
        CORS_ORIGIN: http://localhost:5173
        PRODUCTION_API_URL: http://localhost:3000
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRY: 10m
        JWT_REFRESH_TOKEN_EXPIRY: 7d
        RATE_LIMIT_WINDOW_MS: 900000
        RATE_LIMIT_MAX_REQUESTS: 100
        LOGIN_RATE_LIMIT_WINDOW_MS: 900000
        LOGIN_RATE_LIMIT_MAX_ATTEMPTS: 5
        NODE_ENV: test

    - name: Run client tests
      working-directory: ./client
      run: npm test -- --run

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install server dependencies
      working-directory: ./server
      run: npm ci

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./server
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Environment Variable Validation
      working-directory: ./server
      run: |
        echo "üîç Checking environment variables for build..."
        node ../../tools/print-env-check.js
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: build-jwt-secret
        COOKIE_SECRET: build-cookie-secret
        CSRF_SECRET: build-csrf-secret
        CORS_ORIGIN: http://localhost:5173
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRY: 10m
        JWT_REFRESH_TOKEN_EXPIRY: 7d
        RATE_LIMIT_WINDOW_MS: 900000
        RATE_LIMIT_MAX_REQUESTS: 100
        LOGIN_RATE_LIMIT_WINDOW_MS: 900000
        LOGIN_RATE_LIMIT_MAX_ATTEMPTS: 5
        NODE_ENV: build

    - name: Build server
      working-directory: ./server
      run: npm run build
      env:
        JWT_SECRET: build-jwt-secret
        COOKIE_SECRET: build-cookie-secret
        CSRF_SECRET: build-csrf-secret
        CORS_ORIGIN: http://localhost:5173
        PRODUCTION_API_URL: http://localhost:3000
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRY: 10m
        JWT_REFRESH_TOKEN_EXPIRY: 7d
        RATE_LIMIT_WINDOW_MS: 900000
        RATE_LIMIT_MAX_REQUESTS: 100
        LOGIN_RATE_LIMIT_WINDOW_MS: 900000
        LOGIN_RATE_LIMIT_MAX_ATTEMPTS: 5
        NODE_ENV: build

    - name: Build client
      working-directory: ./client
      run: npm run build

    - name: Upload server build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: server-build
        path: server/dist/
        retention-days: 7

    - name: Upload client build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/dist/
        retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install server dependencies
      working-directory: ./server
      run: npm ci

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Audit root dependencies
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Audit server dependencies
      working-directory: ./server
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Audit client dependencies
      working-directory: ./client
      run: npm audit --audit-level=moderate
      continue-on-error: true

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    # Skip E2E tests if backend is not available
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./client
      run: npx playwright install chromium

    - name: Run E2E tests
      working-directory: ./client
      run: npm run test:e2e
      env:
        CI: true
        # Note: E2E tests require backend to be running
        # In CI, you might want to start a test backend or use a staging environment
