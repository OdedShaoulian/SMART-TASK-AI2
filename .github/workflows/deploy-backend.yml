name: Deploy Backend to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent overlapping deployments
concurrency:
  group: backend-deploy-${{ github.ref }}
  cancel-in-progress: false

# === STAGING (disabled) ===
# Uncomment the following section to enable staging deployments
# on:
#   push:
#     branches: [ main, develop ]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         default: 'production'
#         type: choice
#         options:
#         - production
#         - staging

jobs:
  deploy:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Environment Variable Validation
      run: |
        echo "üîç Validating required environment variables..."
        
        # Check Azure deployment secrets
        if [ -z "${{ secrets.AZURE_WEBAPP_NAME }}" ]; then
          echo "‚ùå AZURE_WEBAPP_NAME is required"
          exit 1
        else
          echo "‚úÖ AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}"
        fi
        
        if [ -z "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}" ]; then
          echo "‚ùå AZURE_WEBAPP_PUBLISH_PROFILE is required"
          echo "   Get this from: Azure Portal ‚Üí App Service ‚Üí Get publish profile"
          exit 1
        else
          echo "‚úÖ AZURE_WEBAPP_PUBLISH_PROFILE: ${AZURE_WEBAPP_PUBLISH_PROFILE:0:20}***"
        fi
        
        # Check application secrets
        if [ -z "${{ secrets.DATABASE_URL }}" ]; then
          echo "‚ùå DATABASE_URL is required"
          exit 1
        else
          echo "‚úÖ DATABASE_URL: ${DATABASE_URL:0:20}***"
        fi
        
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          echo "‚ùå JWT_SECRET is required"
          exit 1
        else
          echo "‚úÖ JWT_SECRET: ${JWT_SECRET:0:4}***"
        fi
        
        if [ -z "${{ secrets.COOKIE_SECRET }}" ]; then
          echo "‚ùå COOKIE_SECRET is required"
          exit 1
        else
          echo "‚úÖ COOKIE_SECRET: ${COOKIE_SECRET:0:4}***"
        fi
        
        if [ -z "${{ secrets.CSRF_SECRET }}" ]; then
          echo "‚ùå CSRF_SECRET is required"
          exit 1
        else
          echo "‚úÖ CSRF_SECRET: ${CSRF_SECRET:0:4}***"
        fi
        
        if [ -z "${{ secrets.CORS_ORIGIN }}" ]; then
          echo "‚ùå CORS_ORIGIN is required"
          exit 1
        else
          echo "‚úÖ CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}"
        fi
        
        echo "‚úÖ Environment validation passed"

    - name: Install server dependencies
      working-directory: ./server
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./server
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Run tests
      working-directory: ./server
      run: npm test -- --ci
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
        CSRF_SECRET: ${{ secrets.CSRF_SECRET }}
        CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
        NODE_ENV: test

    - name: Build server
      working-directory: ./server
      run: npm run build
      env:
        NODE_ENV: production

    - name: Create deployment package
      working-directory: ./server
      run: |
        # Remove any existing deployment artifacts
        rm -f app_package.zip
        rm -f oryx-manifest.toml
        rm -f .deployment
        
        # Install production dependencies only
        npm ci --only=production
        
        # Create deployment package
        zip -r app_package.zip dist/ node_modules/ package.json package-lock.json
        
        echo "‚úÖ Deployment package created: app_package.zip"

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./server/app_package.zip

    - name: Wait for deployment
      run: sleep 30

    - name: Run smoke tests
      run: |
        echo "üîç Running post-deployment smoke tests..."
        
        # Test health endpoint
        curl -sSf ${{ secrets.PRODUCTION_API_URL }}/health || {
          echo "‚ùå Health endpoint test failed"
          exit 1
        }
        
        echo "‚úÖ Health endpoint test passed"
        
        # Test root endpoint
        curl -sSf ${{ secrets.PRODUCTION_API_URL }}/ || {
          echo "‚ùå Root endpoint test failed"
          exit 1
        }
        
        echo "‚úÖ Root endpoint test passed"
        echo "‚úÖ All smoke tests passed"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Backend successfully deployed to production!"
        echo "Production URL: ${{ secrets.PRODUCTION_API_URL }}"
        echo "Health Check: ${{ secrets.PRODUCTION_API_URL }}/health"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Backend deployment failed!"
        echo "Check the logs above for details."
        echo "Production URL: ${{ secrets.PRODUCTION_API_URL }}"
