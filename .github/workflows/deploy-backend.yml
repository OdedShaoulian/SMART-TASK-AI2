name: Deploy Backend to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent overlapping deployments
concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: false

# === STAGING (disabled) ===
# Uncomment the following section to enable staging deployments
# on:
#   push:
#     branches: [ main, develop ]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         default: 'production'
#         type: choice
#         options:
#         - production
#         - staging

jobs:
  deploy:
    name: Deploy to Azure Web App (Publish Profile)
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Early Environment Variable Validation
      run: |
        echo "üîç Validating required environment variables..."
        
        # Check Azure deployment secrets
        if [ -z "${{ secrets.AZURE_WEBAPP_NAME }}" ]; then
          echo "‚ùå AZURE_WEBAPP_NAME is required"
          echo "   Get this from: Azure Portal ‚Üí App Service ‚Üí Overview"
          exit 1
        else
          echo "‚úÖ AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}"
        fi
        
        if [ -z "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}" ]; then
          echo "‚ùå AZURE_WEBAPP_PUBLISH_PROFILE is required"
          echo "   Get this from: Azure Portal ‚Üí App Service ‚Üí Get publish profile"
          exit 1
        else
          echo "‚úÖ AZURE_WEBAPP_PUBLISH_PROFILE: ${AZURE_WEBAPP_PUBLISH_PROFILE:0:20}***"
        fi
        
        # Check application secrets
        if [ -z "${{ secrets.DATABASE_URL }}" ]; then
          echo "‚ùå DATABASE_URL is required"
          echo "   Get this from: Azure Portal ‚Üí App Service ‚Üí Configuration ‚Üí Connection strings"
          exit 1
        else
          echo "‚úÖ DATABASE_URL: ${DATABASE_URL:0:20}***"
        fi
        
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          echo "‚ùå JWT_SECRET is required"
          echo "   Generate with: node -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\""
          exit 1
        else
          echo "‚úÖ JWT_SECRET: ${JWT_SECRET:0:4}***"
        fi
        
        if [ -z "${{ secrets.COOKIE_SECRET }}" ]; then
          echo "‚ùå COOKIE_SECRET is required"
          echo "   Generate with: node -e \"console.log(require('crypto').randomBytes(16).toString('hex'))\""
          exit 1
        else
          echo "‚úÖ COOKIE_SECRET: ${COOKIE_SECRET:0:4}***"
        fi
        
        if [ -z "${{ secrets.CSRF_SECRET }}" ]; then
          echo "‚ùå CSRF_SECRET is required"
          echo "   Generate with: node -e \"console.log(require('crypto').randomBytes(16).toString('hex'))\""
          exit 1
        else
          echo "‚úÖ CSRF_SECRET: ${CSRF_SECRET:0:4}***"
        fi
        
        if [ -z "${{ secrets.CORS_ORIGIN }}" ]; then
          echo "‚ùå CORS_ORIGIN is required"
          echo "   Set this to: https://<your-swa-name>.azurestaticapps.net"
          echo "   Or your custom domain if configured"
          exit 1
        else
          echo "‚úÖ CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}"
        fi
        
        echo "‚úÖ Environment validation passed"

    - name: Resolve backend URL for smoke test
      run: |
        RAW="${{ secrets.PRODUCTION_API_URL }}"
        SANITIZED="$(echo "$RAW" | sed -e 's/^[[:space:]]*//; s/[[:space:]]*$//' \
                                       -e 's/^"//; s/"$//' -e "s/^'//; s/'$//" \
                                       -e 's:/*$::')"
        echo "::add-mask::$RAW"
        echo "::add-mask::$SANITIZED"
        PREF="$(echo "$SANITIZED" | cut -c1-12)"
        echo "üîé API URL (sanitized) prefix: ${PREF}‚Ä¶"

        if [ -z "$SANITIZED" ]; then
          echo "‚ùå PRODUCTION_API_URL is missing"; exit 1; fi
        case "$SANITIZED" in
          http://*|https://*) : ;;
          *) echo "‚ùå PRODUCTION_API_URL must start with http:// or https://"; exit 1;;
        esac

        URL="$SANITIZED" node -e 'try{ new URL(process.env.URL) }catch(e){ console.error("‚ùå PRODUCTION_API_URL is not a valid URL"); process.exit(1) }'
        echo "API_URL=$SANITIZED" >> "$GITHUB_ENV"

    - name: Install server dependencies
      working-directory: ./server
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./server
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Build server
      working-directory: ./server
      run: npm run build
      env:
        NODE_ENV: production

    - name: Run tests
      working-directory: ./server
      run: npm test -- --ci
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
        CSRF_SECRET: ${{ secrets.CSRF_SECRET }}
        CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
        NODE_ENV: test

    - name: Create Run-From-Package ZIP
      working-directory: ./server
      run: |
        # Remove any existing deployment artifacts
        rm -f app_package.zip
        rm -f oryx-manifest.toml
        rm -f .deployment
        
        # Install production dependencies only
        npm ci --only=production
        
        # Create deployment package with required files
        zip -r app_package.zip dist/ node_modules/ package.json package-lock.json
        
        echo "‚úÖ Run-From-Package ZIP created: app_package.zip"

    - name: Deploy to Azure Web App (Publish Profile)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./server/app_package.zip

    - name: Wait for deployment
      run: sleep 30

    - name: Backend post-deploy smoke test
      run: |
        echo "üîç Running backend smoke test against: ${API_URL:0:12}‚Ä¶"
        set -e
        try() { curl -fsS -o /dev/null -w "%{http_code}" "$1" || echo 000; }

        URL1="$API_URL/health"
        URL2="$API_URL/api/health"
        URL3="$API_URL/healthz"
        URL4="$API_URL/test"

        CODE1="$(try "$URL1")"
        if [ "$CODE1" = "200" ]; then echo "‚úÖ Backend OK ($URL1)"; exit 0; fi

        CODE2="$(try "$URL2")"
        if [ "$CODE2" = "200" ]; then echo "‚úÖ Backend OK ($URL2)"; exit 0; fi

        CODE3="$(try "$URL3")"
        if [ "$CODE3" = "200" ]; then echo "‚úÖ Backend OK ($URL3)"; exit 0; fi

        CODE4="$(try "$URL4")"
        if [ "$CODE4" = "200" ]; then echo "‚úÖ Backend OK ($URL4)"; exit 0; fi

        echo "‚ùå Backend deployment test failed"
        echo "   Tried:"
        echo "   - $URL1 (got $CODE1)"
        echo "   - $URL2 (got $CODE2)"
        echo "   - $URL3 (got $CODE3)"
        echo "   - $URL4 (got $CODE4)"
        exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Backend successfully deployed to production!"
        echo "Production URL: ${API_URL:0:12}‚Ä¶"
        echo "Health Check: ${API_URL:0:12}‚Ä¶/health"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Backend deployment failed!"
        echo "Check the logs above for details."
        echo "Production URL: ${{ secrets.PRODUCTION_API_URL }}"

# === STAGING (disabled) ===
# Uncomment to deploy to staging environment
# staging-deploy:
#   name: Deploy to Azure Web App (Staging)
#   runs-on: ubuntu-latest
#   environment: staging
#   if: github.event.inputs.environment == 'staging'
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v4
#   - name: Setup Node.js
#     uses: actions/setup-node@v4
#     with:
#       node-version: '20.x'
#       cache: 'npm'
#   - name: Deploy to Staging
#     uses: azure/webapps-deploy@v2
#     with:
#       app-name: ${{ secrets.AZURE_STAGING_WEBAPP_NAME }}
#       publish-profile: ${{ secrets.AZURE_STAGING_WEBAPP_PUBLISH_PROFILE }}
#       package: ./server/app_package.zip
